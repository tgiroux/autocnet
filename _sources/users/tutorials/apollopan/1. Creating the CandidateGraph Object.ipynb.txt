{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating the CandidateGraph Object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jlaura/anaconda3/envs/autocnet/lib/python3.5/site-packages/IPython/core/magics/pylab.py:161: UserWarning: pylab import has clobbered these variables: ['shape']\n",
      "`%matplotlib` prevents importing * from pylab and numpy\n",
      "  \"\\n`%matplotlib` prevents importing * from pylab and numpy\"\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "sys.path.insert(0, os.path.abspath('/data/autocnet'))\n",
    "\n",
    "from autocnet import CandidateGraph\n",
    "\n",
    "%pylab inline\n",
    "figsize(12,4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Which Apollo Pan images?\n",
    "The first question to ask is which images to use.  Without good geospatial information, using 5, ~2GB each, raw images is not practical for a number of reasons (memory constraints, lack of a priori information to constrain the search space, ambiguity in overlap requiring human intervention).  The JP2000 option is attractive (and viable), but image sizes of >6GB are also concerning from a memory perspective.  Therefore, the highest resolution `png` images were selected.  These were then cropped in [GIMP](https://www.gimp.org) to the extent of the valid data.  The scans are not perfectly square resulting in some black border remaining at some corners.  This should not be an issue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = 'AS15-P-0111_CENTER_LRG_CROPPED.png'\n",
    "b = 'AS15-P-0112_CENTER_LRG_CROPPED.png'\n",
    "\n",
    "adj = {a:[b],\n",
    "       b:[a]}\n",
    "\n",
    "cg = CandidateGraph.from_adjacency(adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe16f80df60>"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsYAAAD8CAYAAAB0FmJXAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XmUZWV97vHv04B0Q4soIIKAJDiCMhhBUFEGmWUsEs01\nUcyKd5lETaLmRu+KxBXNNVE0iesaTTS5GBNXTOyBeZ4UFUVFEAcUBBGZh0YamrF/9493l3Wo7qqu\n6q7uXcP3s9ZebZ13n31+Z5+mfc5b75CqQpIkSZrr5vVdgCRJkjQdGIwlSZIkDMaSJEkSYDCWJEmS\nAIOxJEmSBBiMJUmSJMBgLEmSJAEGY0mSJAkwGEuSJEmAwViSJEkCDMaSJEkSYDCWJEmSAIOxJEmS\nBBiMJUmSJMBgLEmSJAEGY0mSJAkwGEuSJEmAwViSJEkCDMaSJEkSABv3XYAkSZI2oOSZwJuB3YEt\ngWXANcCpVN3VZ2l9S1X1XYMkSZLWt2Rv4H3AEUABCwZaVwABzgE+TNWVG77A/hmMJUmSZrvkbcDH\ngPmMP5R2JfAw8G6qPr0hSptODMaSJEmz2Ugo3mwSz3qIORiOnXwnSZKeJMmlSe5LsunAYzskWZTk\n7iT3J/lekpMG2v85yXVJVg4+3rWdlOSJJMsHjgPGef1TkzzanXdvkguSvHCc8/dM8u0kD3V/7jnQ\ndmCSS7qab1rNcz/YvZfHk3xgVNtRSS5PsizJ7Uk+k+Sp4968keceluTLSR5IcleSy5IcM879WJ5k\n+679piR3JNl84Hq/330uO416TiV5cODn/Qfv30bJQwvhU3t0ofgm2niJhd2xM/A3q38LmwEfI3nZ\nQA03JXntat7rAd3nvrx7v9clecuoc5Lk7Umu6T6n27v384Ypvp+/THJ1ktdN5LqjGYwlSdKvJNkZ\n2J82BvWYgabPAz8HngNsBbwJuGOg/WrgD4HvjHHpr1fVwoHj0jWU8pGqWgjsANwJnDpGvU8BTgP+\nHXg68DngtO5xgAeBfwX+bIzXuR74X8BZq2l7GvAhYHvgRV0tH11D3SQ5Efhv4N+652wLnAwcPXDa\n6PuxsKpuHWjfGPjj0deuqpsHn9M9vMfAY1/pHvtIVS18As5dDiuvHnWdZcBy4EvAB4ELVv9W5tPG\nJE/ErV09WwB/CnwmyQsG2j8B/Anwbtrfn2cDfwEcvqYLT+Z+0iYT/iPwn0m2nGDtv2IwliRJg94E\nXEELom8eeHxv4NSqerCqHq+qq6rqnOHGqvpkVV1EG586ZarqIeALwIvHOOUAWoj8+6p6pKo+QesU\nPah7/jer6vPAT8e4/ue69/HAatq+UFXnVtVDVXUf8BnglePVmyTAx4EPVtVnq+r+qlpZVZdV1Vsn\n8p47HwXeszbhbqCYZ9Im2o2Z914G7AZ8d/XN84AjSbaZ6EtWczZwL23VC5I8n/al6Q1VdUFVraiq\nJ6rq8qo6afy3MLn7WVUraV/iNgee113j4InWbzCWJEmD3gT8R3cclmTb7vErgE8meUOSndbiunt1\nwzB+nOT9SSa0ZGyShcAbgavGOGU34Jp68qSpa7rHp9qrge+v4ZwXADvSOmPXxbeAS4H3rMM13kzr\n+R/TFcC1wHPHPqV48hekcSWZ1w1x2JrWGw/tS8rPq+pbE73OgEndzyQbAW8BHgN+1j18yERfzGAs\nSZIASPIq2lCJ/6qqbwM3AP+ja/5N4CvA+4Ebk3w3bfmvifgyrcf3mcAQ8NuMPbRh2HuSLKOFq4XA\nSWOctxC4f9Rj9wMTGgs8UUkOoQXEk9dw6lbdn7et4bx9u7HLw8cNqznnZOAdmUSP7YD3bA5/vSUs\n2JJVk+3WtLXa9qN15R439nUW0PX8rsH23ee1AlgCvKuqhr/MbA3cPnhyklu69/1wkueMc91J3U/a\nbyxOAX6nqu4ceP0JMRhLkqRhbwbOr6q7u5+/0D1GVd1XVe+tqt1oYzy/CyztftU9rqr6aVXd2P0K\n/HvAXwEnAiT53wMTxwZXQDilqrasqmdV1TFVdUN3/uDEs51oQ2W3GPWSW7CaoRFrK8m+tHtxYlX9\neA2n39P9ud0azruie3/Dxy6jT6iqa4EzgfdOumg45UE4bxltPPHnRjXeTbtxp9C6pR8b/1oTGc5x\na1VtSbv3n6AbytK5h1H3o6p2oAXWTWlDX8YyqftJG2d+Om2c/LC7V/+UVRmMJUkSSRYAvwW8plsx\n4HbaJKo9kuwxeG4XnE+hTUp7xlq8XNGFoar6PwMTx962xic+ebLazbShDbuPCui7s+YhDxOSZC9a\n0Pq9bgz1mlxHm6Q4NBWvD/wl8FbaZLXJWjZe40a0mXDzabPV1vY6g6rqEeDPgZckGe6IvhjYIQMr\nXEzCpO5nVS2ndYL/bvfZAVw40RczGEuSJGi/TX8C2BXYszteRBs+8aYkf5vkxUk27pYs+wPg+qq6\nB9rqEEnm0wLvJknmJ5nXtR0xPFY5bdm199NWkpgKl3Z1vzPJpkne3j1+cfd687q6Nmk/Zv7AihUk\n2aRrnwds3LVv1LW9GDgXeEdVnTGRYrqxzu8C3p/kLUm26Gp4VZJ/nuybq6rrgS8C75zE0zYBXvxx\n2HPFBE5+L/ARxpw1uYI2ZvtX1+7u0fCxyljxqnqUtm7yyd3P1wH/RFsp4pAkC7p7/Io11bY297P7\nO/nZgdefcDCmqjw8PDw8PDzm+EELgB9bzeO/RRsf+ingJ7TfwN9F+xX/iwbOu5TWEzx4HNC1nUJb\n2u1B2uoQfwVsMk4tpwIfmkTtewHfpoW47wB7DbQdsJq6Lh31WqPbT+ra/h9tJ7jlA8f3J1jT4bQv\nFcP361LgqK7tJFqYXz7q2Ltrvwl47cC1dqTl1ktX8zpFmzu3FfB7tGXnHgVWBh7ZHGpzqK2gCurG\n7j0+1v1cUCuhdoX6xMBjA8eKgm0G6hp9rz7U3eNbRtW1GW0Iw9Hdz6GF++91n9NtwGXd3695U3A/\nLx91/g7AI8Duk/nvwJ3vJEmSZqAkz6L19A8B+9CWI14EnFVVv+xOWgwcy9qNElgJLKVqqoaFTHsG\nY0mSpBkiyY7ACbQw/BLgbFoYPrfams+jn7A3rXd1MttBD3sIeA1rt8zajGQwliRJmqQky8doOqJG\ndp+bqtfahRaEh4BdgDNoYfiCapPd1nSBt9HG/I4bjm+mDTAf9gg88jg83v24a7XJjuvFhryf49Zh\nMJYkSZpekryIkTC8HbCUFoYvrao1rK622gsOh+PhiYZjWUkbz/xuqj49znmzksFYkiSpZ91yc3sw\nEoa3oAXhRcBXq+qJKXiRlwHvA46kTZxbMNC6gjZB7mzgw3Np+MQgg7EkSVIPujC8NyNheB4jYfib\nVbVyPb3wNrSNW3anbd6xjLYk2+eoumu9vOYMYTCWJEnaQAbW7x2iTaJ7kJEw/N0ymPVqlUWZJUmS\nNHW6TTBeQ9sG+zjgTloQPryqftBnbXoyg7EkSdIUS7IpcDCtZ/gY4EZaGN6/2m52moYcSiFJkjQF\nkiyg7dA2BBwFXEsLw4vX51JnmjoGY0mSpLWU5Km0VR6GgENpW1MvApZU1W191qbJMxhLkiRNQpKn\nA0fTwvABwFdpYfi0qrq7x9K0jgzGkiRJa5C2xNmxtDD8SuBiWhg+o6qW9Vmbpo7BWJIkaTWSbA8c\nTwvDLwXOo4Xhs6tqrC2MNYMZjCVJkjpJnsPIhhsvAs4CvgScX1Ur+qxN65/BWJIkzWlJnsdIGN4Z\nOI3WM3xRVT3aY2nawAzGkiRpTum2Yt6NkTC8DbCYFoa/XFWP91ieemQwliRJs14XhveiBeETgfmM\nhOGvVdXKHsvTNGEwliRJs1KSecDLGekZfpwWhBcB3ypDkEZxS2hJkjRrJNkI2J8WhI8H7qcF4WOB\n7xmGNR6DsSRJmtGSbAIcSAvDxwG/oIXh11bVj/qsTTOLwViSJM04SeYDh9DC8NHAj2lheL+q+mmf\ntWnmcoyxJEmaEZJsDhxOC8NHAlfTwvDiqrqlz9o0OxiMJUnStJVkC+B1tDD8WuAbtDC8tKru6LM2\nzT4GY0mSNK0keQZwDG1ZtVcDX6btPnd6Vd3bZ22a3QzGkiSpd0m2pU2cG6ItsXYhrWf4zKr6ZZ+1\nae4wGEuSpF4k2QE4gRaGdwfOoYXhc6vqwT5r09xkMJYkSRtMkl9jZMON5wNn0MLwBVX1cJ+1SQZj\nSZK0XiV5ISNh+NnAUloYvqSqHuuzNmmQwViSJE2pJAFeQps8NwRsCSymheGvVNUTPZYnjclgLEmS\n1lkXhl/GSM/wxrQgvAj4RlWt7LE8aUIMxpIkaa0kmQe8ghaETwAepi2rtgi4qgwZmmHcElqSJE1Y\nko1pawsPh+G7aEH4KOD7hmHNZAZjSZI0riRPAQ6mheFjgZtoYfjVVfWTHkuTppRDKSRJ0iqSLAAO\npU2gOwr4IS0ML66qm3osTVpvDMaSJAmAJAuBI2k9w4cB36GF4SVVdWuftUkbgsFYkqQ5LMmWwNG0\nMHwg8DVaGD6tqu7qszZpQzMYS5I0xyTZmjZWeAh4JXApLQyfUVX39Via1CuDsSRJc0CS7YDjaWH4\nN4DzaWH47Kp6oM/apOnCYCxJ0iyVZCfakmonArsBZ9HWGT6vqlb0WZs0HRmMJUmaRZI8l5Hd534d\nOI3WM3xRVT3SZ23SdGcwliRphkuyK61XeAjYFlhC6xm+rKoe77M2aSYxGEuSNMMkCbAnIz3DmwOL\naT3DX6uqJ3osT5qxDMaSJM0ASeYB+zCyFTO0XuFFwJVuxSytO7eEliRpmkqyEW05teGe4V/SgvAQ\ncLVhWJpaBmNJkqaRJJsAB9DC73HAbbQwfEhV/bDH0qRZz2AsSVLPkmwKHEILw0cDN9DC8Cur6oY+\na5PmEscYS5LUgySbAYfTwvCRwPdoYXhxVf28z9qkucpgLEnSBpJkC+AoWhg+BPgmLQwvrarb+6xN\nksFYkqT1KsnTgWNoYfgA4Cu0MHxaVd3TY2mSRjEYS5I0xZI8kzZxbgjYF7iIFobPrKr7+6xN0tgM\nxpIkTYEkzwaOp+1AtydwLm2d4XOq6sE+a5M0MQZjSZLWUpKdGVlj+AXAmbSe4fOr6uH+KpO0NgzG\nkiRNQpIXMBKGdwSW0sLwJVX1aJ+1SVo3BmNJksaRJMCLaUH4ROAZwGJaGP5KVT3eY3mSppDBWJKk\nUbow/BuM9Aw/hRaEFwFXVNXKHsuTtJ4YjCVJApLMo60gcSJwAvAobfLcIuA75f9hSrOeW0JLkuas\nJBsD+9N6hY8H7qUF4aOBaw3D0txiMJYkzSlJngIcRAvDxwI308LwgVX14z5rk9Qvh1JIkma9JPOB\nQ2lh+GjgR7QwvLiqbuyzNknTh8FYkjQrJVkIHEELw4cDV9HC8JKq+kWftUmangzGkqRZI8nTaD3C\nQ7ThElfQwvDSqrqzz9okTX8GY0nSjJZkK9pY4SHgVcBltDB8elXd12dtkmYWg7EkacZJ8izaKhJD\nwN7A+bQwfFZVPdBnbZJmLoOxJGlGSLIjbX3hE2k70Z1NC8PnVtVDfdYmaXYwGEuSpq0kuzCy+9wu\nwOm0MHxhVT3SZ22SZh+DsSRpWkmyKyNh+FnAUtoOdJdV1WN91iZpdjMYS5J6lSTAHoyE4acCi2k9\nw1+tqid6LE/SHGIwliRtcF0Y3oeRMAwtCC8CrqyqlX3VJmnucktoSdIGkWQj4BW0IHwC8CAtCJ8I\nfLfsqZHUM4OxJGm9SbIxcAAtDB8H3EELw4dX1Q96LE2SVmEwliRNqSSbAgfTeoKPAX5Kmzy3f1Vd\n32dtkjQexxhLktZZks2Aw2g9w0cC36f1DC+uqpv7rE2SJspgLElaK0meChxFC8OHAlfSwvDSqrqt\nz9okaW0YjCVJE5bk6cDRtDB8APBVWhg+raru7rE0SVpnBmNJ0riSbEObODcE7AdcTAvDZ1bVsj5r\nk6SpZDCWJK0iyfbA8bQJdHsB59HC8NlVtbzP2iRpfTEYS5IASPIcRjbceBFwJi0Mn19VK/qsTZI2\nBIOxJM1hSZ7PSBh+DnAabWm1i6vq0T5rk6QNzWAsSXNItxXzboyE4a2BJbSe4S9X1eM9lidJvTIY\nS9Is14XhlzIShufTgvAi4OtVtbLH8iRp2jAYS9IslGQe8HJGwvDjjIThb5X/+EvSKtwSWpJmiSQb\nAfvTgvAJwH20IHws8D3DsCSNz2AsSTNYkk2AA2nLqh0L/II2ee6gqrquz9okaaYxGEvSDJNkPnAI\nrWf4aODHtJ7h/arqp33WJkkzmWOMJWkGSLI5cAQtDB8OXE0Lw0uq6pY+a5Ok2cJgLEnTVJItgNfR\nwvBrgW/QwvDSqrqjz9okaTYyGEvSNJJkK+AYWhjeH/gyLQyfXlX39lmbJM12BmNJ6lmSbYHjaWF4\nH+BCWhg+s6p+2WdtkjSXGIwlqQdJdqAtqTYE7A6cQwvD51bVg33WJklzlcFYkjaQJL/OyIYbzwNO\np4XhC6vq4T5rkyQZjCVpvUryQloQPhHYHlhKC8OXVNVjfdYmSXoyg7EkTaEkoQ2NGO4ZfhqwmBaG\nL6+qJ3osT5I0DoOxJK2jLgzvzchWzBvTgvCXgG9W1coey5MkTZDBWJLWQpJ5wCsYCcMraGF4EXBV\n+Y+rJM04bgktSROUZGPgNbQwfDxwJy0IHwn8wDAsSTObwViSxpHkKcDBtDB8LHATLQy/uqp+0mNp\nkqQp5lAKSRolyQLgMFoYPgr4AS0ML66qn/VZmyRp/TEYSxKQZCFtSMSJwKHAd2iT55ZU1W191iZJ\n2jAMxpLmrCRbAkfTeoYPBL5G6xk+raru6rM2SdKGZzCWNKck2Ro4jhaGXwlcTAvDZ1TVsj5rkyT1\ny2AsadZLsh1tFYkh4GXAebQwfHZVPdBnbZKk6cNgLGlWSvIc2vrCQ8CuwFm0MHxeVa3oszZJ0vRk\nMJY0ayR5Li0InwjsDJxOC8MXVdUjPZYmSZoBDMaSZqxuK+ZdaWF4CHgmsIQWhi+rqsd7LE+SNMMY\njCXNKF0Y3ouRMLwZI1sxf72qnuixPEnSDGYwljTtJZkH7MNIGF7JSBi+0q2YJUlTwS2hJU1LSTYC\nXkULwicA99OC8PHANYZhSdJUMxhLmjaSbAIcQAvDxwO30sLwIVX1wx5LkyTNAQZjSb1KsilwCC0M\nHw1cTwvD+1XVT/usTZI0tzjGWNIGl2Qz4AhaGD4C+B7wJWBJVf28z9okSXOXwVjSBpFkC+AoWhg+\nBPgmrWd4aVXd3mdtkiSBwVjSepTkGcAxtDD8auArtDB8elXd02dtkiSNZjCWNKWSbAscRwvDLwcu\nooXhM6vq/j5rkyRpPAZjSessybNpS6oNAXsC59DC8DlV9WCftUmSNFEGY0lrJcmvMbLhxvOBM2hh\n+IKqerjP2iRJWhsGY0kTluQFjIThHYGltDB8SVU92mdtkiStK4OxpDElCfASRsLw04HFtDB8eVU9\n3mN5kiRNKYOxpCfpwvBv0ILwicAmtCD8JeAbVbWyx/IkSVpvDMaSSDIP2I8Whk8AHqGF4UXAd8p/\nKCRJc4BbQktzVJKNaWsLDwHHA/fQeoVfB3zfMCxJmmsMxtIckuQpwEG0MHwscDOtV/iAqvpxn7VJ\nktQ3h1JIs1ySBcChtDD8OuCHtDC8uKpu6rE0SZKmFYOxNAslWQgcQZs8dxhwFS0ML6mqX/RZmyRJ\n05XBWJolkjwNOJrWM3wQ8HVaGD6tqu7sszZJkmYCg7E0gyXZmjZWeAh4FXApbQLdGVV1X4+lSZI0\n4xiMpRkmybNoq0gMAXsD59N6hs+qqgf6rE2SpJnMYCzNAEl2oq0vPAS8GDiLFobPq6qH+qxNkqTZ\nwmAsTVNJdmFkK+ZdgNNpYfjCqnqkz9okSZqNDMbSNJJkV0bC8LOAJbQwfFlVPdZnbZIkzXYGY6lH\nSQLsQVtWbQhYyMhWzF+rqid6LE+SpDnFYCxtYF0Y3oeRnmEYCcNXVtXKvmqTJGkuc0toaQNIshHw\nSloQPgF4gBaEh4Cry2+okiT1zmAsrSdJNgFeQwu/xwO308LwYVX1gz5rkyRJqzIYS1MoyabAa2lh\n+BjgBloYflVVXd9nbZIkaXyOMZbWUZLNgMNoE+iOBK6lheHFVXVzn7VJkqSJMxhLayHJU4GjaD3D\nhwJX0sLwkqq6vc/aJEnS2jEYSxOU5Om04RFDwAHA5cCXgNOr6u4eS5MkSVPAYCyNI8k2wHG0MLwf\ncDGtZ/jMqlrWZ22SJGlqGYylUZJsT1tSbQjYCziXFobPqarlfdYmSZLWH4OxBCTZmZENN14InEkL\nw+dX1Yr+KpMkSRuKwVhzVpLnMxKGdwJOo4Xhi6vq0T5rkyRJG57BWHNGtxXzbrRl1YaArYDFtDD8\nlap6vMfyJElSzwzGmtW6MPxSRnqG59OC8CLg61W1ssfyJEnSNGIw1qyTZB6wLy0InwA8xkgY/nb5\nl16SJK2GW0JrVkiyEbA/I2H4PloQPga41jAsSZLWxGCsGSvJJsBBtDB8LHALLQwfVFXX9VmbJEma\neQzGmlGSzKdtwTwEvA74MW33uX2r6sY+a5MkSTObY4w17SXZHDiCFoaPAL5L6xleUlW39FmbJEma\nPQzGmpaSPI3WIzwEHAxcQQvDS6vqzj5rkyRJs5PBWNNGkq1ok+VOpE2ku4wWhk+vqnv7rE2SJM1+\nBmP1Ksm2wPG0nuF9gAtoYfisqvpln7VJkqS5xWCsDS7JjrQl1YaAlwDn0CbQnVtVD/VZmyRJmrsM\nxtogkvw6I7vPPQ84ndYzfGFVPdxnbZIkSWAw1nqU5EWMhOHtgSW0MHxpVT3WZ22SJEmjGYw1ZZIE\n2J2RMPw0YDEtDF9eVU/0WJ4kSdK4DMZaJ10Y3puRMDyPFoQXAd+sqpU9lidJkjRh7nynSUsyD3gF\nbVm1E4CHaJPnfhP4bvltS5IkzUAGY01Iko2B19B6hY8H7qT1Ch8B/MAwLEmSZjqDscaU5CnAa2lh\n+BjgRloYfnVV/aTP2iRJkqaaY4z1JEkWAIfRwvBRwA9oYXhxVf2sz9okSZLWJ4OxSPJU4EhaGD4U\n+DYtDC+pqtv6rE2SJGlDMRjPUUm2pA2PGAIOBL5KC8OnVdVdfdYmSZLUB4PxHJJkG+BYWhh+BXAJ\nLQyfUVXL+qxNkiSpbwbjWS7J9rRVJIaAlwLn0cLw2VW1vM/aJEmSphOD8SyU5Dm09YWHgF2Bs2hh\n+LyqWtFnbZIkSdOVwXiWSPI8Rnaf2xk4jRaGL6qqR3ssTZIkaUYwGK8PyTOBNwO7A1sCy4BrgFOZ\noolt3VbMu9J2nxsCtgGW0Hag+3JVPT4VryNJkjRXGIynUrI38D7abnAFLBhoXQEEOAf4MFVXTv7y\nCbAXIz3Dm9F6hRcBX6uqletUvyRJ0hxmMJ4qyduAjwHzgXnjnLkSeBh4N1WfXvNlMw94OS0In9A9\n/0u0MPwtt2KWJEmaGm4JPRVGQvFmEzh7Xnfex0hYXThOshHwKkbC8P20IHw8cI1hWJIkaeqN17O5\nQSTZLsnpSW5NUkl2nsRzD0vy5SQPJLkryWVJjunaTkryRJLlo47tu/abktyRZPOB6/1+kkuT7DTq\nOZXkwYGf909yapJHN0oeWgifWgib7dFd5ybamImF3bEz8Derlj8cjl/WvfYmSQ5N8gBwN/B3wB3A\na6tqN+Bi4Crgge79XpfkLaPuR5K8Pck1SR5Kcnv3ft4wxffzl0muTvK6Uc/fNMmHk9ycZEWSnyT5\ns24IyPA5lyZ5uLvO3UkWJ9muazs1yaNd271JLkjywq7tA0keG/W5LBu47uBndE+Si5K8fiLvW5Ik\nCaZBMKYNDTiX1js6YUlOBP4b+DdgB2Bb4GTg6IHTvl5VC0cdtw60bwz88ehrV9XNg8/pHt5j4LGv\ndI995Ak4dzmsXA5cPeo6y4DltHEPHwQuGP06MP9G+IckpwK3A38FPAa8o6peWlV/XVU/GnjKrV09\nWwB/CnwmyQsG2j8B/AnwbmAr4NnAXwCHr3oHn2wy95M2ofAfgf/sdtAb9t/AwbTtpZ8K/C7wP4F/\nGPVyb++u8/zuWn830PaRrm0H4E7g1IG2L476LAdfG7rPCHhB97z/m+Qv1/TeJUmSYBoE46q6o6r+\nEZjwZLSuB/LjwAer6rNVdX9Vrayqy6rqrZN4+Y8C7xkV7iZsq9brewRruI8vA3YDvjvq8cC87WHf\n3eA6YM+q2hf4JS0kj6mas4F7aStfkOT5wB8Cb6iqC6pqRVU9UVWXV9VJ411vsvezm+T3eWBz4Hnd\nNQ4GDgWGquraqnq8qq4Afgf4oyTPXc117qUNEXnxatoeAr6wurY1qaq7q+rzwB8A70uy1Rjvu5K8\nM8lPu97rj3Zjuod7yC9PckqS+5LcmOSIgef+2kDv+oVJPpnk3ydbqyRJmj56D8Zr6QXAjrTO2HXx\nLeBS4D1r8+T9Wihd43jfK4BrgVWSIbApPHItPFZVP5/o6yaZ1w1x2Bq4vnv4IODnVfWtiV5nwKTu\nZ9oY6LfQerd/1j18CPCN0e+jqr4B3ELrSR59na1pvym4ajVtC4E3rq5tEk6j/VZgn3HOOZ723eWl\ntO2yf2+g7eW0Ly1bAx8B/mVgWMgXgG/SeuY/QOsdlyRJM9hMDcbDPYC3reG8fZMsGzhuWM05JwPv\nSLLNZIs4Dw7cEhZsSRsP8OZR7VvT1mvbj9aVe9zqL7OArtd3ArbvxtWuoK1Z/K6qGg6OWzOqpznJ\nLd37fjhtN7yxTOp+0lbVOAX4naq6c+D1x3r+bV37sE9017m6a3vXQNt7urbraUO0Txpo+61Rn+cl\n4xVbVY/Rxms/Y5zT/raq7q2qm4G/B357oO1nVfWZqnoC+BywHbBtkp2AvYGTq+rRqrocOH28WiRJ\n0vQ3U4PxPd2f263hvCuqasuBY5fRJ1TVtcCZwHsnW8RJcMMy2ljiZbTkNOhu2hjjU2jd0o+NfamJ\nDuW4tRtXuwVtPPFBA233MOp+VNUOtEC6KW0+4FgmdT+Bp9OC4P4DbXeP8/ztuvZh7+w+j2dX1Rvr\nyZuenNJLKQHNAAAD/UlEQVS1PauqjqmqwS8z/zXq8zxwvGKTbELb+OTecU4b7OH+GbD9wM+/+qLR\nDe2AFta3B+4deGz0dSRJ0gw0U4PxdbQgMqkJe+P4S+CttMlqE/Zo6zkd10a0mXDzabPVxrBs7KZV\nVdUjwJ8DL0ky3BF9MbBDulUuJmlS97OqltM6wX83yV7dwxcCL0+y4+C5SfahDdO4eC3qWlfHAo/T\nhjyMZbDenYBbxzpxwG3AM5IMLs+341gnS5KkmaG3YNyNUx3+3/NpvZoAm3Y/j6lbx/ddwPuTvCXJ\nFt2421cl+efJ1lJV1wNfBN45mefd01ZNWDGRc99LG6S6miS9grZd9KBNkswfOFZZb7qqHqWtnXxy\n9/N1wD/RVoo4JMmC7h6/Yk21rc39rKp7gM8OvP6FwEXAoiS7Jdkoyb7AfwCfqqqfrKmOqZLkGUne\nCHySNlTinnFO/7MkT+8C/R/T/h6Mq6p+Rhuf/oEkT0myH09evUOSJM1AffYYD05WWkEbdQDwIyYQ\nNqvqS8DraZOlbqWt+fsh2oSrYftl1XWM9x7jkn9FW2Vhws6EVy+EBcPrFW89zrlH0cYffGbVprDq\nKIyzafdg+PjAGJf9V2CnJMOh7I9oQyw+Ths+cAttpbjXAzeP914meD9H+3vgyCTDY6SHgEtoy+8t\nB/4d+BfgHeO99iS8fjWf5zMH2q9Ospw2Pvn3gT+tqpOHG5N8OsnoDVVOA75NWzTkrK7eiXgjbfj4\nPbT79EXgkbV6V5IkaVpwS+h1lSym/cp+bb5krASWUjVVQ0I0CUkKeF73G4N1vdYXgR9VlesmS5I0\nQ83UMcbTyYeZwFjjMTzcPV8zTJK9k+zSDTk5nPblaGnfdUmSpLU3rYPxan5t/qstmfuu7VeqrqTN\nr3toTadCG88wPPRiE9gocOnA+9ppPVY6M+7nzPEs2mIjy2nDV/5gYOk8SZI0AzmUYqokb6NNhpvP\n+F84VtJ6it9N1ejxrpIkSeqJwXgqtaXS3gccSdsRb8FA6wraRLuzgQ+zdjvUSZIkaT0xGK8PbRe9\nN9N2tNuStk7xNcDnePJmFpIkSZomDMaSJEkS03zynSRJkrShGIwlSZIkDMaSJEkSYDCWJEmSAIOx\nJEmSBBiMJUmSJMBgLEmSJAEGY0mSJAkwGEuSJEmAwViSJEkCDMaSJEkSYDCWJEmSAIOxJEmSBBiM\nJUmSJMBgLEmSJAEGY0mSJAkwGEuSJEmAwViSJEkCDMaSJEkSYDCWJEmSAIOxJEmSBBiMJUmSJMBg\nLEmSJAEGY0mSJAkwGEuSJEmAwViSJEkCDMaSJEkSYDCWJEmSAIOxJEmSBBiMJUmSJMBgLEmSJAEG\nY0mSJAmA/w+Vln5Wr721VwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe15c780518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cg.plot(labels=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Graph\n",
    "About the graph\n",
    "## Nodes\n",
    "About the nodes\n",
    "## Edges\n",
    "About the edges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "AutoCNet",
   "language": "python",
   "name": "autocnet"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
